"use strict";

require("core-js/modules/es.regexp.flags.js");
require("core-js/modules/web.immediate.js");
var model = _interopRequireWildcard(require("./model.js"));
var _recipeview = _interopRequireDefault(require("./views/recipeview.js"));
var _searchView = _interopRequireDefault(require("./views/searchView.js"));
var _resultsView = _interopRequireDefault(require("./views/resultsView.js"));
var _paginationView = _interopRequireDefault(require("./views/paginationView.js"));
var _regeneratorRuntime = require("regenerator-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const recipeContainer = document.querySelector('.recipe');

// https://forkify-api.herokuapp.com/v2

///////////////////////////////////////

const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;
    _recipeview.default.renderSpinner();
    _resultsView.default.update(model.getSearchResultsPage());
    bookmarksView.update(model.state.bookmarks);
    await model.loadRecipe(id);
    // const {recipe}=model.state;

    _recipeview.default.render(model.state.recipe);
    // const recipeView = new recipeView(model.state.recipe);
  } catch (err) {
    console.log(err);
    _recipeview.default.renderError();
  }
};
const controlSearchResults = async function () {
  try {
    _recipeview.default.renderSpinner();
    const query = _searchView.default.getQuery();
    if (!query) {
      return;
    }
    await model.loadSearchResults(query);
    // resultsView.renderSpinner();
    _resultsView.default.render(model.getSearchResultsPage());
    _paginationView.default.render(model.state.search);
    console.log(model.state.search.results);
  } catch (err) {
    console.log(err);
  }
};
controlSearchResults();
const controlPagination = function (goToPage) {
  // 1) Render NEW results
  _resultsView.default.render(model.getSearchResultsPage(goToPage));

  // 2) Render NEW pagination buttons
  _paginationView.default.render(model.state.search);
};
const controlServings = function (newServings) {
  // Update the recipe servings (in state)
  model.updateServings(newServings);

  // Update the recipe view
  _recipeview.default.update(model.state.recipe);
};
const init = function () {
  _recipeview.default.addHandlerRender(controlRecipes);
  _recipeview.default.addHandlerUpdateServings(controlServings);
  _searchView.default.addHandlerSearch(controlSearchResults);
  _paginationView.default.addHandlerClick(controlPagination);
};
init();

// ['hashchange','load'].forEach(ev=>window.addEventListener(ev,controlRecipes))
// window.addEventListener('hashchange',showRecipe);
// window.addEventListener('load',showRecipe);